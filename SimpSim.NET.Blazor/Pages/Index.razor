@page "/"
@inject SimpleSimulator SimpleSimulator
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container-fluid border mb-2">
    <h2 class="text-center">Editor</h2>
    <div class="row">
        <textarea class="col" rows="10" @bind="@_assemblyCode" placeholder="Type assembly code here..."></textarea>
    </div>
    <div class="row">
        <button class="col" @onclick="AssembleClicked" disabled="@IsMachineRunning">Assemble</button>
    </div>
    @if (_assemblyException != null)
    {
        <div class="row alert alert-danger mb-0">
            @_assemblyException.Message
        </div>
    }
</div>

<div class="container-fluid border mb-2">
    <div class="row">
        <button class="col" @onclick="RunClicked" disabled="@IsMachineRunning">Run</button>
        <button class="col" @onclick="StepClicked">Step</button>
        <button class="col" @onclick="BreakClicked" disabled="@(!IsMachineRunning)">Break</button>
    </div>
    <div class="row">
        <button class="col" @onclick="ClearMemoryClicked">Clear Memory</button>
    </div>
    <div class="row">
        <button class="col" @onclick="ClearRegistersClicked">Clear Registers</button>
    </div>
    <div class="row">
        <button class="col" @onclick="ClearOutputClicked">Clear Output</button>
    </div>
</div>

<div class="container-fluid border mb-2">
    <div class="row">
        <textarea @ref="@_outputTextArea" class="col" rows="5" readonly>@_outputText</textarea>
    </div>
</div>

<div class="container-fluid border mb-2">
    <div class="row">
        <h5 class="col text-center">Program Counter</h5>
        <h5 class="col text-center">Instruction Register</h5>
    </div>
    <div class="row">
        <input class="form-control-sm col" @bind="SimpleSimulator.Machine.ProgramCounter"/>
        <input class="form-control-sm col" value="@SimpleSimulator.Machine.InstructionRegister" readonly/>
    </div>
</div>

<div class="container-fluid border mb-2">
    <h2 class="text-center">Memory</h2>
    @foreach (int i in Enumerable.Range(0, 32))
    {
        <div class="row">
            @foreach (int j in Enumerable.Range(0, 8))
            {
                <input class="col form-control-sm" @bind="SimpleSimulator.Memory[(byte) (i * 8 + j)]"/>
            }
        </div>
    }
</div>

<div class="container-fluid border mb-2">
    <h2 class="text-center">Registers</h2>
    @foreach (int i in Enumerable.Range(0, 2))
    {
        <div class="row">
            @foreach (int j in Enumerable.Range(0, 8))
            {
                <input class="col form-control-sm" @bind="SimpleSimulator.Registers[(byte) (i * 8 + j)]"/>
            }
        </div>
    }
</div>

@code {

    private string _assemblyCode;
    private AssemblyException _assemblyException;
    private string _outputText;
    private ElementReference _outputTextArea;

    protected override void OnInitialized()
    {
        _assemblyCode = null;
        _assemblyException = null;
        _outputText = null;

        SimpleSimulator.Registers.ValueWrittenToOutputRegister += AppendToOutputText;
        SimpleSimulator.Machine.ProgramCounterChanged += StateHasChanged;
        SimpleSimulator.Machine.InstructionRegisterChanged += StateHasChanged;
        SimpleSimulator.Machine.StateChanged += StateHasChanged;
    }

    private bool IsMachineRunning => SimpleSimulator.Machine.State == Machine.MachineState.Running;

    private async Task RunClicked()
    {
        await SimpleSimulator.Machine.RunAsync(25);
    }

    private void StepClicked()
    {
        SimpleSimulator.Machine.Step();
    }

    private void BreakClicked()
    {
        SimpleSimulator.Machine.Break();
    }

    private void ClearMemoryClicked()
    {
        SimpleSimulator.Memory.Clear();
    }

    private void ClearRegistersClicked()
    {
        SimpleSimulator.Registers.Clear();
    }

    private void ClearOutputClicked()
    {
        _outputText = null;
    }

    private void AppendToOutputText(char c)
    {
        _outputText += c;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("ScrollTextAreaToBottom", _outputTextArea);
    }

    private void AssembleClicked()
    {
        Instruction[] instructions = null;
        _assemblyException = null;

        try
        {
            instructions = SimpleSimulator.Assembler.Assemble(_assemblyCode);
        }
        catch (AssemblyException ex)
        {
            _assemblyException = ex;
        }

        if (instructions != null)
            SimpleSimulator.Memory.LoadInstructions(instructions);
    }

    public void Dispose()
    {
        SimpleSimulator.Registers.ValueWrittenToOutputRegister -= AppendToOutputText;
        SimpleSimulator.Machine.ProgramCounterChanged -= StateHasChanged;
        SimpleSimulator.Machine.InstructionRegisterChanged -= StateHasChanged;
        SimpleSimulator.Machine.StateChanged -= StateHasChanged;
    }

}